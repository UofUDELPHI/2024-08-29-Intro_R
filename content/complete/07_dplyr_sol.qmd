---
title: "Data frame manipulation with dplyr"
format: html
embed-resources: true
editor_options: 
  chunk_output_type: console
---




## Working with data frames using dplyr and the tidyverse


Let's install and load the tidyverse package. Add some chunk options (`#| warning: false`) to suppress noisy loading messages.

```{r}
#| message: false
# in the console ONCE: install.packages("tidyverse")

# load the tidyverse library (or just dplyr)
# library(dplyr)
library(tidyverse)
```



Use `read_csv()` (a tidyverse version of `read.csv()`) to load the gapminder dataset as a "tibble"

```{r}
# use read_csv() to load gapminder
gapminder <- read_csv("data/gapminder.csv")
# look at gapminder (without head())
gapminder
```







The dplyr functions that we're going to use

- `select()`: extract columns from your data frame

- `filter()`: filter to rows of your data frame based on a condition

- `mutate()`: add columns or modify columns in your data frame

- `summarize()`: aggregate information in your columns

- `group_by()`: perform an operation separately for each entry in a categorical column









### Select()

We can use the select() function to extract specific named columns from our data frame

```{r}
# use select() to look at just the country, year, lifeExp columns
select(gapminder, country, year, lifeExp)
```


We can also remove columns:

```{r}
# use select() to remove continent, year, and pop columns
select(gapminder, -continent, -year, -pop)
```


Select can also help you rename columns

```{r}
# use select() to rename lifeExp to life_exp and gdpPercap to gdp_per_cap 
# (keeping all other columns)
select(gapminder, country, continent, year, life_exp = lifeExp, pop, gdp_per_cap = gdpPercap)
# use rename() to do the same thing more succinctly
rename(gapminder, life_exp = lifeExp, gdp_per_cap = gdpPercap)
```











## The pipe `|>` (formerly `%>%`)

The pipe greatly improves the *readability* of our code.

The pipe syntax is: `object |> function()`. This places the object to the left of `|>` into the *first argument* of the function to the right of `|>`.

The following two pieces of code are equivalent:

```{r}
# apply head() to gapminder directly
head(gapminder)
# apply head() to gapminder using the pipe
gapminder |> head()
```

Another example:

```{r}
# apply select to gapminder, year, and pop without the pipe
select(gapminder, year, pop)
# apply select to gapminder, year, and pop with the pipe
gapminder |> select(year, pop) |> head()
```


*Note:* the pipe `|>` is now a part of the R programming language. Previously, you needed to load the magrittr, dplyr, or tidyverse libraries to access the pipe and it had a different symbol: `%>%` (there are very minor differences in functionality). This still works, but it is now recommended that you use the newer "native" pipe syntax: `|>`. 










### Exercise

1. Use the pipe to remove the continent column from gapminder. Save the output as an object called `gapminder_tmp`.

```{r}
gapminder_tmp <- gapminder |> select(-continent)
```


2. Modify your code by adding another pipe to rename the gdpPercap column as "gdp_per_cap". You do not need to define a new object.

```{r}
gapminder_tmp <- gapminder |> 
  # remove the continent column
  select(-continent) |> 
  # rename gdp per cap
  rename(gdp_per_cap = gdpPercap)
```

3. Try to do this using the base R syntax (this is kind of hard!)

```{r}
# base R
gapminder_tmp <- gapminder[, -2]
gapminder_tmp$gdp_per_cap <- gapminder_tmp$gdpPercap
gapminder_tmp <- gapminder_tmp[, -5]
gapminder_tmp
```












## Filtering rows using filter()


The filter function lets you filter to specific rows based on a condition.

Let's filter to just the data from Australia.

Recall that you can apply logical operations to a vector as follows:

```{r}
# asking which entries in the country column are equal to "Australia"
head(gapminder$country == "Australia", 100)
```

We can ask similar questions inside the filter function to use them to subset our rows. Note: no `$` extraction required!

```{r}
# Filtering just to Australia (without the pipe)
filter(gapminder, country == "Australia")
```

We can provide multiple conditions using a comma

```{r}
# filter just to Australia and the years after 1970 (without the pipe)
filter(gapminder, country == "Australia", year > 1970)
```

We can write this code with the pipe

```{r}
# filter just to Australia and the years after 1970 with the pipe
gapminder |> filter(country == "Australia", year > 1970)
```








Let's combine filter and select

- Filter to the continent of Africa, where the year is equal to 1992

- Return just the country and lifeExp columns, where I rename lifeExp to be life_exp

```{r}
# filter to the continent of Africa for the year 1992 
# and then select just the country and lifeExp columns (with renamed life_exp)
gapminder |> 
  filter(continent == "Africa", 
         year == 1992) |> 
  select(country, 
         life_exp = lifeExp)
```

The order of operations can be fairly important.

```{r}
#| error: true

# swap the filter and select steps above
gapminder |> 
  select(country, 
         life_exp = lifeExp) |>
  filter(continent == "Africa", 
         year == 1992) 
  
```






Next, try to extract the data for Australia and Italy.

```{r}
# extract the data for Australia and Italy
gapminder |> filter((country == "Australia") | (country == "Italy"))
```










### Exercise

Filter gapminder to all countries on the Oceania continent for years 1987 and 1992 and select just the country, year, and gdpPercap columns (as gdp_per_cap). 

Save the output in an object called gapminder_oceania.

```{r}
gapminder_oceania <- gapminder |> 
  filter(continent == "Oceania", year %in% c(1987, 1992)) |>
  select(country, year, gdp_per_cap = gdpPercap)
gapminder_oceania
```














## Adding and modifying columns using mutate()


Let's use mutate to add a `gdp` column to our data that is the product of `pop` and `gdpPercap`

```{r}
# use mutate to add a gdp column
gapminder |> mutate(gdp = pop * gdpPercap) 
```

The code above hasn't actually modified gapminder.

```{r}
# print gapminder
gapminder
```



Use mutate to round lifeExp to the nearest integer. Save the resulting df as `gapminder_tmp`

```{r}
# use mutate to round lifeExp to the nearest integer. 
# Save the resulting df as gapminder_tmp
gapminder_tmp <- gapminder |> mutate(lifeExp = round(lifeExp)) 
head(gapminder_tmp)
```







### Exercise

Modify `gapminder_tmp` using mutate() so that it contains a "expected year of death" column, e.g., `deathExp = year + lifeExp`. Overwrite your `gapminder_tmp` object with this new version.



```{r}
gapminder_tmp <- gapminder_tmp |> mutate(deathExp = year + lifeExp)
gapminder_tmp
```











## Summarizing data frames using summarize()

Let's use summarize to compute the average lifeExp in the entire dataset

```{r}
# compute the average lifeExp value
gapminder |> summarize(mean_life_exp = mean(lifeExp))
```







## Combining summarize() with group_by()

Let's compute the average life expectancy for each continent

```{r}
# compute the average lifeExp value for each continent
gapminder |> 
  group_by(continent) |> 
  summarize(mean_life_exp = mean(lifeExp))
```








### Exercise

Use group_by() and summarize() to compute the maximum population for each country.

```{r}
gapminder |> 
  group_by(country) |> 
  summarize(max_pop = max(pop))
```









### Use group_by() with mutate()

Let's add a `mean_life_exp` column to our data frame for each continent

```{r}
# create a mean_life_exp column containing the average lifeExp value for each continent
gapminder |> 
  group_by(continent) |>
  mutate(mean_life_exp = mean(lifeExp)) 
```

It's really important to remember to `ungroup()` your data frame after you have completed your `group_by()` operation.

```{r}
# try to summarize the mean gdpPercap value without ungrouping. Then ungroup!
gapminder |> 
  group_by(continent) |>
  mutate(mean_life_exp = mean(lifeExp)) |>
  ungroup() |>
  summarize(mean(gdpPercap))
```









### Exercise

Filter the `gapminder` object to the countries in Asia after (and including) the `year` 2000, then compute the average `lifeExp` for each country.


```{r}
gapminder |> 
  filter(continent == "Asia", year >= 2000) |> 
  group_by(country) |>
  summarize(mean_life_exp = mean(lifeExp))
```









### Group_by multiple columns simultaneously

Let's compute the average lifeExp for each continent-year combination

```{r}
# compute the average life expectancy for each continent-year combination
gapminder |> 
  group_by(continent, year) |> 
  summarize(mean_life_exp = mean(lifeExp))
```









## Count

A really handy function for summarizing categorical (character/factor) variables is the `count()` function.

```{r}
# count the number of times each continent appears
gapminder |>
  count(continent)
```







## Arrange

You can arrange the rows of your data frame in ascending or descending order of the values of a column in your data using the `arrange()` function.

```{r}
# arrange the rows of gapminder in ascending order of lifeExp
gapminder |>
  arrange(lifeExp)
```


```{r}
# arrange the rows of gapminder in descending order of lifeExp
gapminder |>
  arrange(desc(lifeExp))
```






## Exercise

Use `summarize()` to compute the *median* lifeExp for each country, and then arrange the countries in descending order of maximum `pop` value.

```{r}
gapminder |>
  group_by(country) |>
  summarize(mean_life_exp = median(lifeExp),
            max_pop = max(pop)) |>
  arrange(desc(max_pop))
```
